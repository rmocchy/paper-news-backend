/*
Paper-News-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListPapers200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListPapers200Response{}

// ListPapers200Response struct for ListPapers200Response
type ListPapers200Response struct {
	Papers []ListPapers200ResponsePapersInner `json:"papers"`
	// The total number of papers.
	Total int32 `json:"total"`
}

type _ListPapers200Response ListPapers200Response

// NewListPapers200Response instantiates a new ListPapers200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListPapers200Response(papers []ListPapers200ResponsePapersInner, total int32) *ListPapers200Response {
	this := ListPapers200Response{}
	this.Papers = papers
	this.Total = total
	return &this
}

// NewListPapers200ResponseWithDefaults instantiates a new ListPapers200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListPapers200ResponseWithDefaults() *ListPapers200Response {
	this := ListPapers200Response{}
	return &this
}

// GetPapers returns the Papers field value
func (o *ListPapers200Response) GetPapers() []ListPapers200ResponsePapersInner {
	if o == nil {
		var ret []ListPapers200ResponsePapersInner
		return ret
	}

	return o.Papers
}

// GetPapersOk returns a tuple with the Papers field value
// and a boolean to check if the value has been set.
func (o *ListPapers200Response) GetPapersOk() ([]ListPapers200ResponsePapersInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Papers, true
}

// SetPapers sets field value
func (o *ListPapers200Response) SetPapers(v []ListPapers200ResponsePapersInner) {
	o.Papers = v
}

// GetTotal returns the Total field value
func (o *ListPapers200Response) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *ListPapers200Response) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *ListPapers200Response) SetTotal(v int32) {
	o.Total = v
}

func (o ListPapers200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListPapers200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["papers"] = o.Papers
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *ListPapers200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"papers",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListPapers200Response := _ListPapers200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListPapers200Response)

	if err != nil {
		return err
	}

	*o = ListPapers200Response(varListPapers200Response)

	return err
}

type NullableListPapers200Response struct {
	value *ListPapers200Response
	isSet bool
}

func (v NullableListPapers200Response) Get() *ListPapers200Response {
	return v.value
}

func (v *NullableListPapers200Response) Set(val *ListPapers200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListPapers200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListPapers200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListPapers200Response(val *ListPapers200Response) *NullableListPapers200Response {
	return &NullableListPapers200Response{value: val, isSet: true}
}

func (v NullableListPapers200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListPapers200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


